diff -Naur reduce-2.2.2-jep07/dataFile.py reduce-2.2.2-jep08/dataFile.py
--- reduce-2.2.2-jep07/dataFile.py	2011-07-26 12:26:49.646507946 -0400
+++ reduce-2.2.2-jep08/dataFile.py	2011-07-26 15:31:07.859487383 -0400
@@ -27,7 +27,7 @@
     return line.rstrip('\n\r')
     #!!! the old code for strip_term is preserved below
     line_end = len(line)
-    for i in range(1, min(line_end, 5)):
+    for i in range(1, min(line_end, 5)): #!!! needs study
         if line[-i] == '\n' or line[-i] == '\r':
             line_end -= 1
     line = line[:line_end]
@@ -393,7 +393,7 @@
         image_path,
         measurement_files,
         gage_length_in,
-        N_POINTS_FOR_EST,
+        n_points_for_est,
         summary_file):
         #!!! a better name for this method is needed and will reveal itself 
         #!!! as the refactoring work continues. 
@@ -430,8 +430,8 @@
         print 'The number of lines is:', self.number_of_lines
 
         # Get an initial estimate of the preload 
-        # from the first N_POINTS_FOR_EST points. 
-        leadave = self.find_preload(N_POINTS_FOR_EST)
+        # from the first n_points_for_est points. 
+        leadave = self.find_preload(n_points_for_est)
         print 'The initial preload estimate is:', leadave
 
         # Determine the failure point. 
diff -Naur reduce-2.2.2-jep07/HISTORY reduce-2.2.2-jep08/HISTORY
--- reduce-2.2.2-jep07/HISTORY	2011-07-26 12:24:08.508533726 -0400
+++ reduce-2.2.2-jep08/HISTORY	2011-07-26 17:11:13.023992242 -0400
@@ -1,3 +1,9 @@
+2011-07-26 reduce-2.2.2-jep08 James Prior
+
+    rlo.py and dataFile.py
+
+        Miscellaneous refactorings. 
+
 2011-07-26 reduce-2.2.2-jep07 James Prior
 
     dataFile.py
diff -Naur reduce-2.2.2-jep07/MD5SUM reduce-2.2.2-jep08/MD5SUM
--- reduce-2.2.2-jep07/MD5SUM	2011-07-26 12:27:07.846279146 -0400
+++ reduce-2.2.2-jep08/MD5SUM	2011-07-26 17:11:19.283913544 -0400
@@ -1,8 +1,8 @@
 d22d26f5e12df29d258779afb9c24321  AUTHORS
-4394f051df9e558d9ffc6c54dc6b44e2  dataFile.py
-2f1db24b01ed522a0f86796ace7ddbc7  HISTORY
+c6e9ca21374e9d902506e569139bc160  dataFile.py
+4094e741325ceadd79b7c1c2c56d277e  HISTORY
 83fc2d8b27267835cb5aaa38122323c7  measurementFile.py
 82261669a64efc2dcfd6ae421eb7053f  reducePlot.py
-d90187ee7bc7ce5afa79821af06df9f4  rlo.py
+17e163e9d29bfa64d4aa8c2e6dc8fea1  rlo.py
 92f9899ed684652be377a18488d867da  setup.py
 46d4ed4205f776a25f2df8914261bdbd  tee.py
diff -Naur reduce-2.2.2-jep07/rlo.py reduce-2.2.2-jep08/rlo.py
--- reduce-2.2.2-jep07/rlo.py	2011-07-26 11:20:35.000000000 -0400
+++ reduce-2.2.2-jep08/rlo.py	2011-07-26 17:06:18.939689381 -0400
@@ -41,8 +41,6 @@
 '''
 N_POINTS_FOR_EST = 150
 
-zero_load = 10 # !!! variable or constant? might be modified in class DataFile.find_load_pct() Does this belong in this dataFile.py? 
-
 def usage():
     print >>sys.stderr, '%s [-h] [--help]' % sys.argv[0]
 
@@ -75,8 +73,6 @@
 # Redirect writes to stdout to go to both standard output and a log file. 
 real_stdout = sys.stdout
 sys.stdout = tee = Tee([real_stdout, open('script.log', 'w')])
-if False: # This restores normal output. 
-    sys.stdout = real_stdout
 
 base_path = os.getcwd()
 print 'base_path:', base_path
@@ -119,7 +115,6 @@
 
 # Copy the text (*.txt) and Excel (*.xls) files into a working directory and 
 # make separate lists of them.  
-os.chdir(reduce_path) # !!! does this matter? is this needed? superfluous? try to eliminate. 
 for filename in os.listdir(base_path):
     sourcefile = os.path.join(base_path, filename)
     destfile = os.path.join(reduce_path, filename)
@@ -154,9 +149,16 @@
             return True
     else:
         return False
-
-# Remove lines from working_files.  
-# that have anything that can not be interpreted as a float. 
+    #!!! I'm thinking of replacing the above code with the following code. 
+    #!!! My reservation is that the following is too tricky. 
+    #!!! Is it too tricky, or is my unease a symptom of my unfamiliarity 
+    #!!! with Python and the "Python way"? 
+    #!!! import operator
+    #!!! return not reduce(operator.__and__,map(isfloat,s.split()),True)
+
+# Remove header lines from files listed in working_files. 
+#
+# Header lines are lines that have stuff that can not be interpreted as float. 
 #!!! Consider doing this closer to where data is consumed. 
 for filename in working_files:
     srcfile = open(filename, 'rU')
@@ -164,28 +166,27 @@
     for line in srcfile:
         if not has_non_float(line):
             dstfile.write(line)
+        #!!! I wonder about replacing the above if statement with: 
+        #!!! if reduce(operator.__and__,map(isfloat,s.split()),True):
     dstfile.close()
     srcfile.close()
     shutil.move(dstfile.name, filename)
 
-# go into the working file directory and create the summary file
-
-os.chdir(reduce_path) # !!! does this matter? is this needed? superfluous? try to eliminate. 
-
-#Start looking at the data files
-
 print time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.localtime())
 print 'user:', os.times()[0], 's'
-print 'system:', os.times()[1], ' s'
+print 'system:', os.times()[1], 's'
 print
 
+# Start prcessing the data files. 
+
 print 'Measurement Files:'
 print
-
 measurement_files = []
 for meas_file_name in measurement_file_names:
     print meas_file_name
-    measurement_files.append(MeasFile(meas_file_name))
+    measurement_files.append(MeasFile(meas_file_name)) #!!! should this be moved up to where measurement_file_names are appended? How does what MeasFile return differ from what it is passed? 
+
+os.chdir(reduce_path) # !!! try to eventually eliminate. 
 
 for filename in map(os.path.basename, working_files):
     print 'Analyzing:', filename
@@ -203,5 +204,3 @@
     print 'system:', os.times()[1], 's'
     print
 
-summary_file.close()
-
