diff -Naur reduce-2.2.0-trimmed/HISTORY reduce-2.2.0-jep01/HISTORY
--- reduce-2.2.0-trimmed/HISTORY	1969-12-31 19:00:00.000000000 -0500
+++ reduce-2.2.0-jep01/HISTORY	2011-07-21 13:36:08.306888344 -0400
@@ -0,0 +1,32 @@
+2011-07-21 reduce-2.2.0-jep01
+
+    rlo.py
+
+        Refactored code that created reduce_path and image_path 
+        directories, and checked to see if those directories are 
+        writable. 
+
+        This included the elimination of a redundant test of ability 
+        to write to reduce_path directory, which led to big dedent 
+        of following code and subsequent unwrapping of some statements 
+        which had previously been split across more than one line. 
+
+        Old error message was about not being able to read, 
+        even though the test was about writing to the directory. 
+        The error message was changed to be about writing. 
+
+        Catches directory creation error and generates error 
+        message and sys.exit()s instead of crashing in Python interpreter. 
+
+        Redirected messages about fatal errors to sys.stderr. 
+
+        Instead of the xlrd-0.7.1 that is bundled with reduce, 
+        I used the older version 0.6.1-2 of the python-xlrd package 
+        that was avaiable for Bodhi linux 1.1.0. reduce seemed to 
+        work with the older 0.6.1-2 version of xlrd. 
+
+        New code tries to follow PEP 8 -- Style Guide for Python Code
+        http://www.python.org/dev/peps/pep-0008/
+
+    Created HISTORY file to document changes. 
+
diff -Naur reduce-2.2.0-trimmed/rlo.py reduce-2.2.0-jep01/rlo.py
--- reduce-2.2.0-trimmed/rlo.py	2011-07-21 08:07:18.000000000 -0400
+++ reduce-2.2.0-jep01/rlo.py	2011-07-21 13:29:51.351627313 -0400
@@ -92,345 +92,350 @@
     measurement_file_names=[]
     measurement_files=[]
 
-    # create the working directories
-    if not os.access(reduce_path, os.R_OK) : 
-        os.mkdir(reduce_path) 
-        print reduce_path + " created"
-    
-    if not os.access(image_path, os.R_OK) : 
-        os.mkdir(image_path)
-        print image_path + " created"
-    
+    # Create the directories. 
+    for directory in [reduce_path, image_path]:
+        if False:
+            print 'Path is %s' % directory
+
+        # Create directory if needed. 
+        if not os.access(directory, os.R_OK):
+            try:
+                os.mkdir(directory) 
+            except:
+                print >>sys.stderr, ('ERROR: Could not create %s directory. '
+                    % directory)
+                sys.exit(os.EX_USAGE)
+            else:
+                print directory + ' created'
+
+        # Test for ability to write to directory. 
+        if not os.access(directory, os.W_OK):
+            print >>sys.stderr, ('ERROR: Could not write to the %s directory.' 
+                % directory)
+            sys.exit(os.EX_USAGE)
 
-    # check to see if everything got created OK
-    if not os.access(reduce_path, os.W_OK) or not os.access(image_path, os.W_OK): 
-        print "Something's haywire. I couldn't read the working directories!" 
-        exit() 
-    
     # move the text files into a working directory and make lists of data files and measurement files
-    if os.access(reduce_path, os.W_OK) :
-    
-        os.chdir(reduce_path)
-        for somefilename in os.listdir(base_path) :
-            sourcefile = os.path.join(base_path,somefilename)
-            destfile = os.path.join(reduce_path,somefilename)
-            if somefilename.endswith(".txt") or somefilename.endswith(".TXT") :
-    
-                shutil.copyfile(sourcefile, destfile)
-                working_files.append(destfile)
-            if somefilename.endswith(".xls") or somefilename.endswith(".XLS") :
-    
-                shutil.copyfile(sourcefile, destfile)
-                measurement_file_names.append(destfile)
-                
-        # Remove the second header line so the script doesn't choke
-        temp = tempfile.mktemp()
-        for foo in working_files :
-            shutil.move(foo, temp)
-            file1 = open(foo, 'w')
-            file2 = open(temp, 'rU')
-            i=1
-            for line in file2.readlines():
-                if i!=2 : file1.write(line)
-                i += 1
-            file1.close()
-            file2.close()
-        if (os.access(temp, os.W_OK)) : os.remove(temp)
-    
-        # go into the working file directory and create the summary file
-    
-        os.chdir(reduce_path)
-        summary_file=open(summary_file_path, 'w');
-        summary_file.write('Specimen\tRate\tPeak Load')
-        log_file=open(log_file_path, 'w');
+    os.chdir(reduce_path)
+    for somefilename in os.listdir(base_path) :
+        sourcefile = os.path.join(base_path,somefilename)
+        destfile = os.path.join(reduce_path,somefilename)
+        if somefilename.endswith(".txt") or somefilename.endswith(".TXT") :
+
+            shutil.copyfile(sourcefile, destfile)
+            working_files.append(destfile)
+        if somefilename.endswith(".xls") or somefilename.endswith(".XLS") :
+
+            shutil.copyfile(sourcefile, destfile)
+            measurement_file_names.append(destfile)
+            
+    # Remove the second header line so the script doesn't choke
+    temp = tempfile.mktemp()
+    for foo in working_files :
+        shutil.move(foo, temp)
+        file1 = open(foo, 'w')
+        file2 = open(temp, 'rU')
+        i=1
+        for line in file2.readlines():
+            if i!=2 : file1.write(line)
+            i += 1
+        file1.close()
+        file2.close()
+    if (os.access(temp, os.W_OK)) : os.remove(temp)
+
+    # go into the working file directory and create the summary file
+
+    os.chdir(reduce_path)
+    summary_file=open(summary_file_path, 'w');
+    summary_file.write('Specimen\tRate\tPeak Load')
+    log_file=open(log_file_path, 'w');
+
+    #Start looking at the data files
+
+    print time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
+    print "user:",os.times()[0],"s"
+    print "system:",os.times()[1],"s"
+    print >>log_file, time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
+    print >>log_file, "user:",os.times()[0],"s"
+    print >>log_file, "system:",os.times()[1],"s" 
     
-        #Start looking at the data files
+    print "Measurement Files:"
+    print >>log_file, "Measurement Files:"
     
-        print time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
-        print "user:",os.times()[0],"s"
-        print "system:",os.times()[1],"s"
-        print >>log_file, time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
-        print >>log_file, "user:",os.times()[0],"s"
-        print >>log_file, "system:",os.times()[1],"s" 
+    for meas_file_name in measurement_file_names :
+        print meas_file_name
+        print >>log_file,meas_file_name
+        measurement_files.append(measFile(meas_file_name))
         
-        print "Measurement Files:"
-        print >>log_file, "Measurement Files:"
         
-        for meas_file_name in measurement_file_names :
-            print meas_file_name
-            print >>log_file,meas_file_name
-            measurement_files.append(measFile(meas_file_name))
-            
-            
-        for foo in working_files :
-        
-            #get the name of the next file
+    for foo in working_files :
+    
+        #get the name of the next file
+    
+        foo_name=os.path.basename(foo)
+        print "Analyzing:",
+        print foo_name
+        print >>log_file, "Analyzing:",
+        print >>log_file, foo_name
         
-            foo_name=os.path.basename(foo)
-            print "Analyzing:",
-            print foo_name
-            print >>log_file, "Analyzing:",
-            print >>log_file, foo_name
-            
-            
         
-            #plot the raw data and move the picture into out pictures directory
+    
+        #plot the raw data and move the picture into out pictures directory
+    
+        thisDataFile=dataFile_SL(foo_name)
+        if Gage_Length_in != 0 : thisDataFile.Gage_Length_in = Gage_Length_in
         
-            thisDataFile=dataFile_SL(foo_name)
-            if Gage_Length_in != 0 : thisDataFile.Gage_Length_in = Gage_Length_in
-            
-            for mfn in measurement_files :
-                for specimen in mfn.specimens :
-                    #print specimen
-                    if foo_name.find(specimen.stl_ID) != -1:
-                        print foo_name, "appears to have a measurement file entry:"
-                        print specimen
-                        thisDataFile.Has_Measurement_File = True
-                        thisDataFile.Thickness_in = specimen.thick
-                        thisDataFile.Width_in = specimen.width
-                        thisDataFile.Specimen_ID = "STL " + str(specimen.stl_ID)
+        for mfn in measurement_files :
+            for specimen in mfn.specimens :
+                #print specimen
+                if foo_name.find(specimen.stl_ID) != -1:
+                    print foo_name, "appears to have a measurement file entry:"
+                    print specimen
+                    thisDataFile.Has_Measurement_File = True
+                    thisDataFile.Thickness_in = specimen.thick
+                    thisDataFile.Width_in = specimen.width
+                    thisDataFile.Specimen_ID = "STL " + str(specimen.stl_ID)
 
-                        thisDataFile.CS_Area_in2 = specimen.area
-            
-            picturename = plot_time_disp_load(thisDataFile,'-raw',0,1,0.1,1)
-            shutil.move(picturename,os.path.join(image_path,picturename))
+                    thisDataFile.CS_Area_in2 = specimen.area
+        
+        picturename = plot_time_disp_load(thisDataFile,'-raw',0,1,0.1,1)
+        shutil.move(picturename,os.path.join(image_path,picturename))
 
 
-            picturename = plot_time_disp_load(thisDataFile,'_zerocheck',0,1,0.1,0.1)
-            shutil.move(picturename,os.path.join(image_path,picturename))        
-            
-            thisDataFile.traces[thisDataFile.TIME].setLabel("Time [sec]")
-            thisDataFile.traces[thisDataFile.STROKE].setLabel("Stroke [in]")
-            thisDataFile.traces[thisDataFile.LOAD].setLabel("Load [lbf]")
-        
-            #Count the number of rows        
-        
-            print "The number of lines is:",
-            print thisDataFile.number_of_lines
-            print >>log_file, "The number of lines is:",
-            print >>log_file, thisDataFile.number_of_lines
-            
-        
-            #Get an initial estimate of the preload from the first 150 points.
+        picturename = plot_time_disp_load(thisDataFile,'_zerocheck',0,1,0.1,0.1)
+        shutil.move(picturename,os.path.join(image_path,picturename))        
         
-            leadave=thisDataFile.find_preload(150)
-            print "The initial preload estimate is:",
-            print leadave
-            
-            print >>log_file, "The initial preload estimate is:",
-            print >>log_file, leadave
+        thisDataFile.traces[thisDataFile.TIME].setLabel("Time [sec]")
+        thisDataFile.traces[thisDataFile.STROKE].setLabel("Stroke [in]")
+        thisDataFile.traces[thisDataFile.LOAD].setLabel("Load [lbf]")
+    
+        #Count the number of rows        
+    
+        print "The number of lines is:",
+        print thisDataFile.number_of_lines
+        print >>log_file, "The number of lines is:",
+        print >>log_file, thisDataFile.number_of_lines
         
-            #determine the failure point
+    
+        #Get an initial estimate of the preload from the first 150 points.
+    
+        leadave=thisDataFile.find_preload(150)
+        print "The initial preload estimate is:",
+        print leadave
         
-            test_end=thisDataFile.find_end()
-            if thisDataFile.Load_Drop_Line<thisDataFile.number_of_lines-1:
-                print "Load drop found at line:",
-                print thisDataFile.Load_Drop_Line
-
-                print >>log_file, "Load drop found at line:",
-                print >>log_file, thisDataFile.Load_Drop_Line
-            
-            print "The max area occurs at line:",
-            print thisDataFile.Area_End_Line
-            print "The 95% stroke value is at line:",
-            print thisDataFile.End_Of_Stroke_Line
-            
-            print "The end of the test is line:",
-            print test_end
-
-            print >>log_file, "The end of the test is line:",
-            print >>log_file, test_end
-            
-            print "The end of the test is time:",
-            print thisDataFile.getTimeData()[test_end]
+        print >>log_file, "The initial preload estimate is:",
+        print >>log_file, leadave
+    
+        #determine the failure point
+    
+        test_end=thisDataFile.find_end()
+        if thisDataFile.Load_Drop_Line<thisDataFile.number_of_lines-1:
+            print "Load drop found at line:",
+            print thisDataFile.Load_Drop_Line
 
-            print >>log_file, "The end of the test is time:",
-            print >>log_file, thisDataFile.getTimeData()[test_end]
-            
+            print >>log_file, "Load drop found at line:",
+            print >>log_file, thisDataFile.Load_Drop_Line
         
-            #get the load shift from the post failure region
+        print "The max area occurs at line:",
+        print thisDataFile.Area_End_Line
+        print "The 95% stroke value is at line:",
+        print thisDataFile.End_Of_Stroke_Line
         
-            
-            
-            if thisDataFile.Area_End_Line<0.99*thisDataFile.number_of_lines:
-                test_end=max([test_end,thisDataFile.Area_End_Line])
-            postload_line=int(test_end+0.2*(thisDataFile.number_of_lines-test_end))
-            #print postload_line
-            postload=thisDataFile.find_postload(postload_line)
-            #print postload
-            #print 0.5*max(thisDataFile.getLoadData())
-            
-            if ( (test_end >= (0.99 * thisDataFile.number_of_lines)
-                 and leadave != 0)
-                 or postload > 0.5*max(thisDataFile.getLoadData())) : 
-                print "no post-failure zero-load data, using initial trace"
-                
-                print >>log_file, "no post-failure zero-load data, using initial trace"
-                loadshift = leadave
-            else :
-                loadshift = postload
-                print "Load offset from post failure data:",
-                print postload
+        print "The end of the test is line:",
+        print test_end
 
-                print >>log_file, "Load offset from post failure data:",
-                print >>log_file, postload
+        print >>log_file, "The end of the test is line:",
+        print >>log_file, test_end
         
-            #Zero the load trace
+        print "The end of the test is time:",
+        print thisDataFile.getTimeData()[test_end]
+
+        print >>log_file, "The end of the test is time:",
+        print >>log_file, thisDataFile.getTimeData()[test_end]
         
-            
-            new_column=thisDataFile.getLoadData()
-            for i in range(len(new_column)):
-                new_column[i]-=loadshift
-                
-            while thisDataFile.number_of_columns < thisDataFile.ZL:
-                thisDataFile.append_column([], "blank")
-            
-            thisDataFile.append_column(new_column, "Zeroed Load [lbf]")
-            
-            #Plot the data raw data and the blown up axis after zeroing the load
+    
+        #get the load shift from the post failure region
+    
         
-            picturename = plot_time_disp_zeroed_load(thisDataFile,'-post-shift',0,1,0.1,1)
-            shutil.move(picturename,os.path.join(image_path,picturename)) 
-            
-            picturename = plot_time_disp_zeroed_load(thisDataFile,'_zerocheck-post-shift',0,1,0.1,0.1)
-            shutil.move(picturename,os.path.join(image_path,picturename)) 
-            
         
-            # Find a new, better end point based on the shifted data
+        if thisDataFile.Area_End_Line<0.99*thisDataFile.number_of_lines:
+            test_end=max([test_end,thisDataFile.Area_End_Line])
+        postload_line=int(test_end+0.2*(thisDataFile.number_of_lines-test_end))
+        #print postload_line
+        postload=thisDataFile.find_postload(postload_line)
+        #print postload
+        #print 0.5*max(thisDataFile.getLoadData())
         
-            test_end=thisDataFile.find_end()
-            print "The failure line is:",
-            print test_end
+        if ( (test_end >= (0.99 * thisDataFile.number_of_lines)
+             and leadave != 0)
+             or postload > 0.5*max(thisDataFile.getLoadData())) : 
+            print "no post-failure zero-load data, using initial trace"
+            
+            print >>log_file, "no post-failure zero-load data, using initial trace"
+            loadshift = leadave
+        else :
+            loadshift = postload
+            print "Load offset from post failure data:",
+            print postload
 
-            print >>log_file, "The failure line is:",
-            print >>log_file, test_end
+            print >>log_file, "Load offset from post failure data:",
+            print >>log_file, postload
+    
+        #Zero the load trace
     
         
-            # If there is a post failure region, cut it off.
-        
+        new_column=thisDataFile.getLoadData()
+        for i in range(len(new_column)):
+            new_column[i]-=loadshift
             
+        while thisDataFile.number_of_columns < thisDataFile.ZL:
+            thisDataFile.append_column([], "blank")
         
-            # Get and subtract out the initial displacement and time
+        thisDataFile.append_column(new_column, "Zeroed Load [lbf]")
         
-            disp_start = 0.0
-            disp_start=thisDataFile.getStrokeTrace().get_point(0)
-            print "Start displacement is:",
-            print disp_start
-
-            print >>log_file, "Start displacement is:",
-            print >>log_file, disp_start
-            thisDataFile.traces[1].shift_column(-disp_start)
-            
-            time_start = 0.0
-            time_start = thisDataFile.getTimeTrace().get_point(0)
-            print "Start time is:",
-            print time_start
-
-            print >>log_file, "Start time is:",
-            print >>log_file, time_start
-            thisDataFile.traces[0].shift_column(-time_start)
-            
+        #Plot the data raw data and the blown up axis after zeroing the load
+    
+        picturename = plot_time_disp_zeroed_load(thisDataFile,'-post-shift',0,1,0.1,1)
+        shutil.move(picturename,os.path.join(image_path,picturename)) 
+        
+        picturename = plot_time_disp_zeroed_load(thisDataFile,'_zerocheck-post-shift',0,1,0.1,0.1)
+        shutil.move(picturename,os.path.join(image_path,picturename)) 
         
-            # Plot the time and displcaement shifted data
+    
+        # Find a new, better end point based on the shifted data
+    
+        test_end=thisDataFile.find_end()
+        print "The failure line is:",
+        print test_end
+
+        print >>log_file, "The failure line is:",
+        print >>log_file, test_end
+
+    
+        # If there is a post failure region, cut it off.
+    
         
-            picturename = plot_time_zeroed_load(thisDataFile)
-            shutil.move(picturename,os.path.join(image_path,picturename))
-           
+    
+        # Get and subtract out the initial displacement and time
+    
+        disp_start = 0.0
+        disp_start=thisDataFile.getStrokeTrace().get_point(0)
+        print "Start displacement is:",
+        print disp_start
+
+        print >>log_file, "Start displacement is:",
+        print >>log_file, disp_start
+        thisDataFile.traces[1].shift_column(-disp_start)
         
-            #Cut off the initial, pre-test trace and plot the result     
+        time_start = 0.0
+        time_start = thisDataFile.getTimeTrace().get_point(0)
+        print "Start time is:",
+        print time_start
+
+        print >>log_file, "Start time is:",
+        print >>log_file, time_start
+        thisDataFile.traces[0].shift_column(-time_start)
         
-            pulse_start=thisDataFile.find_start(0.4,0.05)
-            print "The start line is:",
-            print pulse_start
+    
+        # Plot the time and displcaement shifted data
+    
+        picturename = plot_time_zeroed_load(thisDataFile)
+        shutil.move(picturename,os.path.join(image_path,picturename))
+       
+    
+        #Cut off the initial, pre-test trace and plot the result     
+    
+        pulse_start=thisDataFile.find_start(0.4,0.05)
+        print "The start line is:",
+        print pulse_start
 
-            print >>log_file, "The start line is:",
-            print >>log_file, pulse_start
-            
-            if pulse_start>test_end :
-                print "start > end, adjusting..."
-                print >>log_file,"start > end, adjusting..."
+        print >>log_file, "The start line is:",
+        print >>log_file, pulse_start
+        
+        if pulse_start>test_end :
+            print "start > end, adjusting..."
+            print >>log_file,"start > end, adjusting..."
 
 ##work in progress
 
 
-                test_end=thisDataFile.number_of_lines
-            picturename = plot_rate_measure(thisDataFile, pulse_start, test_end)
-            shutil.move(picturename,os.path.join(image_path,picturename)) 
-            
-        
-            #Get the new time and displacement zeroes, subtract them, and plot the result
+            test_end=thisDataFile.number_of_lines
+        picturename = plot_rate_measure(thisDataFile, pulse_start, test_end)
+        shutil.move(picturename,os.path.join(image_path,picturename)) 
         
-            
-            picturename = plot_time_disp_zeroed_load(thisDataFile,'-reduced',0,1,0,1)
-            new_picturename=picturename[:-4] + ".png"
-            shutil.move(picturename,new_picturename)
-            shutil.move(new_picturename,os.path.join(image_path,picturename))
+    
+        #Get the new time and displacement zeroes, subtract them, and plot the result
     
         
-            #Plot the final load-stroke curve
-        
-            picturename = plot_disp_zeroed_load(thisDataFile)
-            shutil.move(picturename,os.path.join(image_path,picturename))
-            
-            thisDataFile.log_info(summary_file,test_end)
-            
-            if thisDataFile.Has_Measurement_File :
-                if thisDataFile.Gage_Length_in !=0 and thisDataFile.CS_Area_in2 != 0:
-                    
-                    new_column=thisDataFile.getStrokeData()
-                    load_data=thisDataFile.getLoadData()
-                    
-                    slope_start = thisDataFile.find_load_pct(0.4)
-                    slope_end = thisDataFile.find_load_pct(0.5)
-
-                    slope = (load_data[slope_end] - load_data[slope_start])/\
-                            (new_column[slope_end] - new_column[slope_start])
-                    print "modulus = ", str(slope/thisDataFile.CS_Area_in2)
-                    intercept = new_column[slope_start]-load_data[slope_start]/slope
-                    print "intercept = ",str(intercept)
-
-
-                    for i in range(len(new_column)):
-                        new_column[i]=(new_column[i]-intercept)/thisDataFile.Gage_Length_in
-                    thisDataFile.append_column(new_column,"Nominal Strain [in/in]")
-                    thisDataFile.NOM_STRAIN = len(thisDataFile.traces)-1
-                    
-                    new_column=thisDataFile.getZLData()
-                    for i in range(len(new_column)):
-                        new_column[i]=new_column[i]/thisDataFile.CS_Area_in2
-                    thisDataFile.append_column(new_column,"Stress [psi]")
-                    thisDataFile.PSI = len(thisDataFile.traces)-1
-
-                    test_end=thisDataFile.find_neg(test_end)
-
-                    picturename = \
-                    plot_stress_strain(thisDataFile,thisDataFile.PSI,thisDataFile.NOM_STRAIN, \
-                    0,test_end)
-                    shutil.move(picturename,os.path.join(image_path,picturename)) 
-                    
+        picturename = plot_time_disp_zeroed_load(thisDataFile,'-reduced',0,1,0,1)
+        new_picturename=picturename[:-4] + ".png"
+        shutil.move(picturename,new_picturename)
+        shutil.move(new_picturename,os.path.join(image_path,picturename))
+
+    
+        #Plot the final load-stroke curve
     
+        picturename = plot_disp_zeroed_load(thisDataFile)
+        shutil.move(picturename,os.path.join(image_path,picturename))
         
-            #Calculate stuff and save it to the summary file
+        thisDataFile.log_info(summary_file,test_end)
         
-            #thisDataFile.log_info(summary_file,test_end)
-            
-            print time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
-            print "user:",os.times()[0],"s"
-            print "system:",os.times()[1],"s"
-
-            print >>log_file, time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
-            print >>log_file, "user:",os.times()[0],"s"
-            print >>log_file, "system:",os.times()[1],"s"
+        if thisDataFile.Has_Measurement_File :
+            if thisDataFile.Gage_Length_in !=0 and thisDataFile.CS_Area_in2 != 0:
+                
+                new_column=thisDataFile.getStrokeData()
+                load_data=thisDataFile.getLoadData()
+                
+                slope_start = thisDataFile.find_load_pct(0.4)
+                slope_end = thisDataFile.find_load_pct(0.5)
 
-            print ""
-            print >>log_file,""
-            
+                slope = (load_data[slope_end] - load_data[slope_start])/\
+                        (new_column[slope_end] - new_column[slope_start])
+                print "modulus = ", str(slope/thisDataFile.CS_Area_in2)
+                intercept = new_column[slope_start]-load_data[slope_start]/slope
+                print "intercept = ",str(intercept)
+
+
+                for i in range(len(new_column)):
+                    new_column[i]=(new_column[i]-intercept)/thisDataFile.Gage_Length_in
+                thisDataFile.append_column(new_column,"Nominal Strain [in/in]")
+                thisDataFile.NOM_STRAIN = len(thisDataFile.traces)-1
+                
+                new_column=thisDataFile.getZLData()
+                for i in range(len(new_column)):
+                    new_column[i]=new_column[i]/thisDataFile.CS_Area_in2
+                thisDataFile.append_column(new_column,"Stress [psi]")
+                thisDataFile.PSI = len(thisDataFile.traces)-1
+
+                test_end=thisDataFile.find_neg(test_end)
+
+                picturename = \
+                plot_stress_strain(thisDataFile,thisDataFile.PSI,thisDataFile.NOM_STRAIN, \
+                0,test_end)
+                shutil.move(picturename,os.path.join(image_path,picturename)) 
+                
+
+    
+        #Calculate stuff and save it to the summary file
+    
+        #thisDataFile.log_info(summary_file,test_end)
         
-            #(end of analysis loop)
+        print time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
+        print "user:",os.times()[0],"s"
+        print "system:",os.times()[1],"s"
+
+        print >>log_file, time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
+        print >>log_file, "user:",os.times()[0],"s"
+        print >>log_file, "system:",os.times()[1],"s"
+
+        print ""
+        print >>log_file,""
         
     
-        #Were all done, close the summary file
+        #(end of analysis loop)
     
-        summary_file.close()
-        log_file.close()
-        
+
+    #Were all done, close the summary file
+
+    summary_file.close()
+    log_file.close()
+
