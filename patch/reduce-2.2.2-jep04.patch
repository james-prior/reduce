diff -Naur reduce-2.2.2-jep03/HISTORY reduce-2.2.2-jep04/HISTORY
--- reduce-2.2.2-jep03/HISTORY	2011-07-25 14:45:46.803890781 -0400
+++ reduce-2.2.2-jep04/HISTORY	2011-07-25 15:12:31.555716320 -0400
@@ -1,3 +1,10 @@
+2011-07-25 reduce-2.2.2-jep04 James Prior
+
+    rlo.py
+
+        Redirected writes to stdout to go to both standard output 
+        and a log file (without using ">>t," explicit redirection). 
+
 2011-07-25 reduce-2.2.2-jep03 James Prior
 
     dataFile.py and rlo.py
diff -Naur reduce-2.2.2-jep03/MD5SUM reduce-2.2.2-jep04/MD5SUM
--- reduce-2.2.2-jep03/MD5SUM	2011-07-25 14:47:35.730521388 -0400
+++ reduce-2.2.2-jep04/MD5SUM	2011-07-25 15:12:42.835574512 -0400
@@ -1,8 +1,8 @@
 d22d26f5e12df29d258779afb9c24321  AUTHORS
 3da94b9aa1ea12e8aba3eaa3037f3d95  dataFile.py
-fd417fe1f77d44b84c471a2cf44f69da  HISTORY
+f27a4e686d07ad431908cf65a3ade3d8  HISTORY
 83fc2d8b27267835cb5aaa38122323c7  measurementFile.py
 82261669a64efc2dcfd6ae421eb7053f  reducePlot.py
-26b6837dda1cc976bdb0827ddf20968e  rlo.py
+55bae56d8b2696409aa84238caf211d3  rlo.py
 92f9899ed684652be377a18488d867da  setup.py
 39212773f9861e9e9c218a6cc3c8c40f  tee.py
diff -Naur reduce-2.2.2-jep03/rlo.py reduce-2.2.2-jep04/rlo.py
--- reduce-2.2.2-jep03/rlo.py	2011-07-25 14:39:41.212486889 -0400
+++ reduce-2.2.2-jep04/rlo.py	2011-07-25 15:10:09.533501780 -0400
@@ -73,21 +73,14 @@
     usage()
     sys.exit(os.EX_USAGE)
 
-if False:
-    # !!! experiment: unsuccessful so far
-    # !!! Goal is for regular prints to to write to two files.  
-    # !!! To eliminate need for '>>t, '. 
-    real_stdout = sys.stdout
-    t = sys.stdout = Tee([real_stdout, open('script.log', 'w')])
-    print 'Hello world to both stdout and the log file'
-else:
-    # Printing to t writes to all its listed files.  
-    t = Tee([
-        sys.stdout,
-        open('script.log', 'w')])
+# Redirect writes to stdout to go to both standard output and a log file. 
+real_stdout = sys.stdout
+sys.stdout = tee = Tee([real_stdout, open('script.log', 'w')])
+if False: # This restores normal output. 
+    sys.stdout = real_stdout
 
 base_path = os.getcwd()
-print >>t, 'base_path:', base_path
+print 'base_path:', base_path
 
 def create_directory(directory):
     # Create directory, but only if needed. 
@@ -99,7 +92,7 @@
                 % directory)
             sys.exit(os.EX_CANTCREAT)
         else:
-            print >>t, directory, 'created'
+            print directory, 'created'
 
     # Test for ability to write to directory. 
     if not os.access(directory, os.W_OK):
@@ -109,16 +102,16 @@
 
 # reduce_path is name of directory to put reduced data in. 
 reduce_path = os.path.join(base_path, 'reduced')
-print >>t, 'reduce_path:', reduce_path
+print 'reduce_path:', reduce_path
 create_directory(reduce_path)
 
 # image_path is name of directory to put pretty plot images in.  
 image_path = os.path.join(reduce_path, 'png')
-print >>t, 'image_path:', image_path
+print 'image_path:', image_path
 create_directory(image_path)
 
 summary_file_path = os.path.join(reduce_path, 'summary.dat')
-print >>t, 'summary_file_path:', summary_file_path
+print 'summary_file_path:', summary_file_path
 summary_file = open(summary_file_path, 'w')
 print >>summary_file, 'Specimen\tRate\tPeak Load'
 
@@ -182,21 +175,21 @@
 
 #Start looking at the data files
 
-print >>t, time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.localtime())
-print >>t, 'user:', os.times()[0], 's'
-print >>t, 'system:', os.times()[1], ' s'
-print >>t
+print time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.localtime())
+print 'user:', os.times()[0], 's'
+print 'system:', os.times()[1], ' s'
+print
 
-print >>t, 'Measurement Files:'
-print >>t
+print 'Measurement Files:'
+print
 
 measurement_files = []
 for meas_file_name in measurement_file_names:
-    print >>t, meas_file_name
+    print meas_file_name
     measurement_files.append(MeasFile(meas_file_name))
 
 for filename in map(os.path.basename, working_files):
-    print >>t, 'Analyzing:', filename
+    print 'Analyzing:', filename
 
     # Plot the raw data and move the picture to image_path directory.
     f = DataFile_SL(filename)
@@ -218,9 +211,8 @@
     for mfn in measurement_files:
         for specimen in mfn.specimens:
             if filename.find(specimen.stl_id) != -1:
-                print >>t, filename,
-                print >>t, 'appears to have a measurement file entry:',
-                print >>t, specimen
+                print filename, 'appears to have a measurement file entry:',
+                print specimen
                 f.set_has_measurement_file(True)
                 f.set_cs_area_in2(specimen.area)
 
@@ -234,23 +226,23 @@
     f.traces[f.STROKE].set_label('Stroke [in]') #!!!
     f.traces[f.LOAD].set_label('Load [lbf]') #!!!
 
-    print >>t, 'The number of lines is:', f.get_number_of_lines()
+    print 'The number of lines is:', f.get_number_of_lines()
 
     # Get an initial estimate of the preload 
     # from the first N_POINTS_FOR_EST points. 
     leadave = f.find_preload(N_POINTS_FOR_EST)
-    print >>t, 'The initial preload estimate is:', leadave
+    print 'The initial preload estimate is:', leadave
 
     # Determine the failure point. 
     test_end = f.find_end()
     if f.get_load_drop_line() < f.get_number_of_lines() - 1:
-        print >>t, 'Load drop found at line:', f.get_load_drop_line()
+        print 'Load drop found at line:', f.get_load_drop_line()
 
-    print >>t, 'The max area occurs at line:', f.get_area_end_line()
-    print >>t, 'The 95% stroke value is at line:', f.get_end_of_stroke_line()
+    print 'The max area occurs at line:', f.get_area_end_line()
+    print 'The 95% stroke value is at line:', f.get_end_of_stroke_line()
 
-    print >>t, 'The end of the test is line:', test_end
-    print >>t, 'The end of the test is time:', f.get_time_data()[test_end] #!!! [test_end] is curious
+    print 'The end of the test is line:', test_end
+    print 'The end of the test is time:', f.get_time_data()[test_end] #!!! [test_end] is curious
 
     # Get the load shift from the post failure region. 
     if f.get_area_end_line() < 0.99 * f.get_number_of_lines():
@@ -260,11 +252,11 @@
 
     if ((test_end >= 0.99 * f.get_number_of_lines() and leadave != 0)
     or postload > 0.5 * max(f.get_load_data())):
-        print >>t, 'no post-failure zero-load data, using initial trace'
+        print 'no post-failure zero-load data, using initial trace'
         loadshift = leadave
     else:
         loadshift = postload
-        print >>t, 'Load offset from post failure data:', postload
+        print 'Load offset from post failure data:', postload
 
     #Zero the load trace #!!!
 
@@ -287,18 +279,18 @@
 
     # Find a new, better end point based on the shifted data
     test_end = f.find_end()
-    print >>t, 'The failure line is:', test_end
+    print 'The failure line is:', test_end
 
     # If there is a post failure region, cut it off. !!!?
 
     # Get and subtract out the initial displacement and time
 
     disp_start = f.get_stroke_trace().get_point(0)
-    print >>t, 'Start displacement is:', disp_start
+    print 'Start displacement is:', disp_start
     f.traces[1].shift_column(-disp_start)
 
     time_start = f.get_time_trace().get_point(0)
-    print >>t, 'Start time is:', time_start
+    print 'Start time is:', time_start
     f.traces[0].shift_column(-time_start)
 
     # Plot the time and displacement shifted data. 
@@ -307,10 +299,10 @@
 
     # Cut off the initial, pre-test trace and plot the result. 
     pulse_start = f.find_start(0.4, 0.05)
-    print >>t, 'The start line is:', pulse_start
+    print 'The start line is:', pulse_start
 
     if pulse_start > test_end:
-        print >>t, 'start > end, adjusting...'
+        print 'start > end, adjusting...'
 
 ##work in progress
 
@@ -341,9 +333,9 @@
 
         slope = ((load_data[slope_end] - load_data[slope_start])
         /       (new_column[slope_end] - new_column[slope_start]))
-        print >>t, 'modulus =', slope / f.get_cs_area_in2()
+        print 'modulus =', slope / f.get_cs_area_in2()
         intercept = new_column[slope_start]-load_data[slope_start] / slope
-        print >>t, 'intercept =', intercept
+        print 'intercept =', intercept
 
         for i in range(len(new_column)):
             new_column[i] = (new_column[i]-intercept) / f.get_gage_length_in()
@@ -361,10 +353,10 @@
         picturename = plot_stress_strain(f, psi, nom_strain, 0, test_end)
         shutil.move(picturename, os.path.join(image_path, picturename))
 
-    print >>t, time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.localtime())
-    print >>t, 'user:', os.times()[0], 's'
-    print >>t, 'system:', os.times()[1], 's'
-    print >>t
+    print time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.localtime())
+    print 'user:', os.times()[0], 's'
+    print 'system:', os.times()[1], 's'
+    print
 
 summary_file.close()
 
