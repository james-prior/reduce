diff -Naur reduce-2.2.2-jep05/dataFile.py reduce-2.2.2-jep06/dataFile.py
--- reduce-2.2.2-jep05/dataFile.py	2011-07-25 14:38:20.000000000 -0400
+++ reduce-2.2.2-jep06/dataFile.py	2011-07-26 11:22:57.922679240 -0400
@@ -21,6 +21,8 @@
 import tempfile
 import shutil
 
+from reducePlot import *
+
 def strip_term(line):
     return line.rstrip('\n\r')
     #!!! the old code for strip_term is preserved below
@@ -419,6 +421,171 @@
             str(max(self.traces[6].data[:end_line])))
         #print self.traces[6].data[:end_line]
 
+    def moby_foo(
+        self,
+        image_path,
+        measurement_files,
+        gage_length_in,
+        N_POINTS_FOR_EST,
+        summary_file):
+        #!!! a better name for this method is needed and will reveal itself 
+        #!!! as the refactoring work continues. 
+
+        #!!! While I am converting following code to use method calls instead 
+        #!!! of directly accessing f's variables, the code will get ugly. 
+        #!!! After I figure out where the code really belongs, 
+        #!!! it will become much simpler (and pretty). 
+        #!!! 
+        #!!! Please be patient.
+
+        if gage_length_in != 0: #!!! better way than sentinel value? 
+            self.set_gage_length_in(gage_length_in)
+
+        for mfn in measurement_files:
+            for specimen in mfn.specimens:
+                if filename.find(specimen.stl_id) != -1:
+                    print filename, 'appears to have a measurement file entry:',
+                    print specimen
+                    self.set_has_measurement_file(True)
+                    self.set_cs_area_in2(specimen.area)
+
+        picturename = plot_time_disp_load(self, '-raw', 0, 1, 0.1, 1)
+        shutil.move(picturename, os.path.join(image_path, picturename))
+
+        picturename = plot_time_disp_load(self, '_zerocheck', 0, 1, 0.1, 0.1)
+        shutil.move(picturename, os.path.join(image_path, picturename))
+
+        self.traces[self.TIME].set_label('Time [sec]') #!!!
+        self.traces[self.STROKE].set_label('Stroke [in]') #!!!
+        self.traces[self.LOAD].set_label('Load [lbf]') #!!!
+
+        print 'The number of lines is:', self.get_number_of_lines()
+
+        # Get an initial estimate of the preload 
+        # from the first N_POINTS_FOR_EST points. 
+        leadave = self.find_preload(N_POINTS_FOR_EST)
+        print 'The initial preload estimate is:', leadave
+
+        # Determine the failure point. 
+        test_end = self.find_end()
+        if self.get_load_drop_line() < self.get_number_of_lines() - 1:
+            print 'Load drop found at line:', self.get_load_drop_line()
+
+        print 'The max area occurs at line:', self.get_area_end_line()
+        print 'The 95% stroke value is at line:', self.get_end_of_stroke_line()
+
+        print 'The end of the test is line:', test_end
+        print 'The end of the test is time:', self.get_time_data()[test_end] #!!! [test_end] is curious
+
+        # Get the load shift from the post failure region. 
+        if self.get_area_end_line() < 0.99 * self.get_number_of_lines():
+            test_end = max([test_end, self.get_area_end_line()])
+        postload_line = int(test_end + 0.2 * (self.get_number_of_lines() - test_end))
+        postload = self.find_postload(postload_line)
+
+        if ((test_end >= 0.99 * self.get_number_of_lines() and leadave != 0)
+        or postload > 0.5 * max(self.get_load_data())):
+            print 'no post-failure zero-load data, using initial trace'
+            loadshift = leadave
+        else:
+            loadshift = postload
+            print 'Load offset from post failure data:', postload
+
+        #Zero the load trace #!!!
+
+        new_column = self.get_load_data()
+        for i in range(len(new_column)):
+            new_column[i] -= loadshift
+
+        while self.get_raw_number_of_columns() < self.get_zl():
+            self.append_column([], 'blank')
+
+        self.append_column(new_column, 'Zeroed Load [lbf]')
+
+        #Plot the data raw data and the blown up axis after zeroing the load
+
+        picturename = plot_time_disp_zeroed_load(self, '-post-shift', 0, 1, 0.1, 1)
+        shutil.move(picturename, os.path.join(image_path, picturename))
+
+        picturename = plot_time_disp_zeroed_load(
+            self, '_zerocheck-post-shift', 0, 1, 0.1, 0.1)
+        shutil.move(picturename, os.path.join(image_path, picturename))
+
+        # Find a new, better end point based on the shifted data
+        test_end = self.find_end()
+        print 'The failure line is:', test_end
+
+        # If there is a post failure region, cut it off. !!!?
+
+        # Get and subtract out the initial displacement and time
+
+        disp_start = self.get_stroke_trace().get_point(0)
+        print 'Start displacement is:', disp_start
+        self.traces[1].shift_column(-disp_start)
+
+        time_start = self.get_time_trace().get_point(0)
+        print 'Start time is:', time_start
+        self.traces[0].shift_column(-time_start)
+
+        # Plot the time and displacement shifted data. 
+        picturename = plot_time_zeroed_load(self)
+        shutil.move(picturename, os.path.join(image_path, picturename))
+
+        # Cut off the initial, pre-test trace and plot the result. 
+        pulse_start = self.find_start(0.4, 0.05)
+        print 'The start line is:', pulse_start
+
+        if pulse_start > test_end:
+            print 'start > end, adjusting...'
+
+##work in progress
+
+            test_end = self.get_number_of_lines()
+
+        picturename = plot_rate_measure(self, pulse_start, test_end)
+        shutil.move(picturename, os.path.join(image_path, picturename))
+
+        # Get the new time and displacement zeroes, subtract them, 
+        # and plot the result. 
+        picturename = plot_time_disp_zeroed_load(self, '-reduced', 0, 1, 0, 1)
+        shutil.move(picturename, os.path.join(image_path, picturename))
+
+        # Plot the final load-stroke curve. 
+        picturename = plot_disp_zeroed_load(self)
+        shutil.move(picturename, os.path.join(image_path, picturename))
+
+        self.log_info(summary_file, test_end)
+
+        if self.get_has_measurement_file() \
+        and self.get_gage_length_in() != 0 \
+        and self.get_cs_area_in2() != 0:
+            new_column = self.get_stroke_data()
+            load_data = self.get_load_data()
+
+            slope_start = self.find_load_pct(0.4)
+            slope_end = self.find_load_pct(0.5)
+
+            slope = ((load_data[slope_end] - load_data[slope_start])
+            /       (new_column[slope_end] - new_column[slope_start]))
+            print 'modulus =', slope / self.get_cs_area_in2()
+            intercept = new_column[slope_start]-load_data[slope_start] / slope
+            print 'intercept =', intercept
+
+            for i in range(len(new_column)):
+                new_column[i] = (new_column[i]-intercept) / self.get_gage_length_in()
+            self.append_column(new_column, 'Nominal Strain [in/in]')
+            nom_strain = len(self.get_traces_raw())-1
+
+            new_column = self.get_zl_data()
+            for i in range(len(new_column)):
+                new_column[i] /= self.get_cs_area_in2()
+            self.append_column(new_column, 'Stress [psi]')
+            psi = len(self.get_traces_raw()) - 1
+
+            test_end = self.find_neg(test_end)
+
+            picturename = plot_stress_strain(self, psi, nom_strain, 0, test_end)
+            shutil.move(picturename, os.path.join(image_path, picturename))
 
 class DataTrace:
     def __init__(self, filename, column, label, *args, **kwargs):
diff -Naur reduce-2.2.2-jep05/HISTORY reduce-2.2.2-jep06/HISTORY
--- reduce-2.2.2-jep05/HISTORY	2011-07-26 08:37:31.955465547 -0400
+++ reduce-2.2.2-jep06/HISTORY	2011-07-26 11:33:48.322502605 -0400
@@ -1,3 +1,11 @@
+2011-07-26 reduce-2.2.2-jep06 James Prior
+
+    rlo.py and dataFile.py
+
+        Moved much code from rlo.py to 
+        a new method of the DataFile_SL class in dataFile.py. 
+        (This is just a first step in this move.)
+
 2011-07-26 reduce-2.2.2-jep05 James Prior
 
     tee.py
diff -Naur reduce-2.2.2-jep05/MD5SUM reduce-2.2.2-jep06/MD5SUM
--- reduce-2.2.2-jep05/MD5SUM	2011-07-26 08:37:47.011276268 -0400
+++ reduce-2.2.2-jep06/MD5SUM	2011-07-26 11:34:03.246314988 -0400
@@ -1,8 +1,8 @@
 d22d26f5e12df29d258779afb9c24321  AUTHORS
-3da94b9aa1ea12e8aba3eaa3037f3d95  dataFile.py
-41a09209eaf37cfc49522151b4a58614  HISTORY
+9b980606a398d4a176d13b9397095e4e  dataFile.py
+3e27d4fc726871e17d8c22bb5c97e775  HISTORY
 83fc2d8b27267835cb5aaa38122323c7  measurementFile.py
 82261669a64efc2dcfd6ae421eb7053f  reducePlot.py
-55bae56d8b2696409aa84238caf211d3  rlo.py
+d90187ee7bc7ce5afa79821af06df9f4  rlo.py
 92f9899ed684652be377a18488d867da  setup.py
 46d4ed4205f776a25f2df8914261bdbd  tee.py
diff -Naur reduce-2.2.2-jep05/rlo.py reduce-2.2.2-jep06/rlo.py
--- reduce-2.2.2-jep05/rlo.py	2011-07-25 15:10:09.000000000 -0400
+++ reduce-2.2.2-jep06/rlo.py	2011-07-26 11:20:35.360471489 -0400
@@ -30,7 +30,6 @@
 import getopt
 
 from dataFile import *
-from reducePlot import *
 from measurementFile import *
 from tee import *
 from xlrd import *
@@ -192,166 +191,12 @@
     print 'Analyzing:', filename
 
     # Plot the raw data and move the picture to image_path directory.
-    f = DataFile_SL(filename)
-
-    #!!! the bazillion of f.get_*() and f.set_*() method calls below 
-    #!!! makes me think that the structure of following code is fundamentally 
-    #!!! awkward and should go into the class's code.
-    #!!! 
-    #!!! While I am converting following code to use method calls instead 
-    #!!! of directly accessing f's variables, the code will get ugly. 
-    #!!! After I figure out where the code really belongs, 
-    #!!! it will become much simpler (and pretty). 
-    #!!! 
-    #!!! Please be patient.
-
-    if gage_length_in != 0: #!!! better way than sentinel value? 
-        f.set_gage_length_in(gage_length_in)
-
-    for mfn in measurement_files:
-        for specimen in mfn.specimens:
-            if filename.find(specimen.stl_id) != -1:
-                print filename, 'appears to have a measurement file entry:',
-                print specimen
-                f.set_has_measurement_file(True)
-                f.set_cs_area_in2(specimen.area)
-
-    picturename = plot_time_disp_load(f, '-raw', 0, 1, 0.1, 1)
-    shutil.move(picturename, os.path.join(image_path, picturename))
-
-    picturename = plot_time_disp_load(f, '_zerocheck', 0, 1, 0.1, 0.1)
-    shutil.move(picturename, os.path.join(image_path, picturename))
-
-    f.traces[f.TIME].set_label('Time [sec]') #!!!
-    f.traces[f.STROKE].set_label('Stroke [in]') #!!!
-    f.traces[f.LOAD].set_label('Load [lbf]') #!!!
-
-    print 'The number of lines is:', f.get_number_of_lines()
-
-    # Get an initial estimate of the preload 
-    # from the first N_POINTS_FOR_EST points. 
-    leadave = f.find_preload(N_POINTS_FOR_EST)
-    print 'The initial preload estimate is:', leadave
-
-    # Determine the failure point. 
-    test_end = f.find_end()
-    if f.get_load_drop_line() < f.get_number_of_lines() - 1:
-        print 'Load drop found at line:', f.get_load_drop_line()
-
-    print 'The max area occurs at line:', f.get_area_end_line()
-    print 'The 95% stroke value is at line:', f.get_end_of_stroke_line()
-
-    print 'The end of the test is line:', test_end
-    print 'The end of the test is time:', f.get_time_data()[test_end] #!!! [test_end] is curious
-
-    # Get the load shift from the post failure region. 
-    if f.get_area_end_line() < 0.99 * f.get_number_of_lines():
-        test_end = max([test_end, f.get_area_end_line()])
-    postload_line = int(test_end + 0.2 * (f.get_number_of_lines() - test_end))
-    postload = f.find_postload(postload_line)
-
-    if ((test_end >= 0.99 * f.get_number_of_lines() and leadave != 0)
-    or postload > 0.5 * max(f.get_load_data())):
-        print 'no post-failure zero-load data, using initial trace'
-        loadshift = leadave
-    else:
-        loadshift = postload
-        print 'Load offset from post failure data:', postload
-
-    #Zero the load trace #!!!
-
-    new_column = f.get_load_data()
-    for i in range(len(new_column)):
-        new_column[i] -= loadshift
-
-    while f.get_raw_number_of_columns() < f.get_zl():
-        f.append_column([], 'blank')
-
-    f.append_column(new_column, 'Zeroed Load [lbf]')
-
-    #Plot the data raw data and the blown up axis after zeroing the load
-
-    picturename = plot_time_disp_zeroed_load(f, '-post-shift', 0, 1, 0.1, 1)
-    shutil.move(picturename, os.path.join(image_path, picturename))
-
-    picturename = plot_time_disp_zeroed_load(f, '_zerocheck-post-shift', 0, 1, 0.1, 0.1)
-    shutil.move(picturename, os.path.join(image_path, picturename))
-
-    # Find a new, better end point based on the shifted data
-    test_end = f.find_end()
-    print 'The failure line is:', test_end
-
-    # If there is a post failure region, cut it off. !!!?
-
-    # Get and subtract out the initial displacement and time
-
-    disp_start = f.get_stroke_trace().get_point(0)
-    print 'Start displacement is:', disp_start
-    f.traces[1].shift_column(-disp_start)
-
-    time_start = f.get_time_trace().get_point(0)
-    print 'Start time is:', time_start
-    f.traces[0].shift_column(-time_start)
-
-    # Plot the time and displacement shifted data. 
-    picturename = plot_time_zeroed_load(f)
-    shutil.move(picturename, os.path.join(image_path, picturename))
-
-    # Cut off the initial, pre-test trace and plot the result. 
-    pulse_start = f.find_start(0.4, 0.05)
-    print 'The start line is:', pulse_start
-
-    if pulse_start > test_end:
-        print 'start > end, adjusting...'
-
-##work in progress
-
-        test_end = f.get_number_of_lines()
-
-    picturename = plot_rate_measure(f, pulse_start, test_end)
-    shutil.move(picturename, os.path.join(image_path, picturename))
-
-    # Get the new time and displacement zeroes, subtract them, 
-    # and plot the result. 
-    picturename = plot_time_disp_zeroed_load(f, '-reduced', 0, 1, 0, 1)
-    shutil.move(picturename, os.path.join(image_path, picturename))
-
-    # Plot the final load-stroke curve. 
-    picturename = plot_disp_zeroed_load(f)
-    shutil.move(picturename, os.path.join(image_path, picturename))
-
-    f.log_info(summary_file, test_end)
-
-    if f.get_has_measurement_file() \
-    and f.get_gage_length_in() != 0 \
-    and f.get_cs_area_in2() != 0:
-        new_column = f.get_stroke_data()
-        load_data = f.get_load_data()
-
-        slope_start = f.find_load_pct(0.4)
-        slope_end = f.find_load_pct(0.5)
-
-        slope = ((load_data[slope_end] - load_data[slope_start])
-        /       (new_column[slope_end] - new_column[slope_start]))
-        print 'modulus =', slope / f.get_cs_area_in2()
-        intercept = new_column[slope_start]-load_data[slope_start] / slope
-        print 'intercept =', intercept
-
-        for i in range(len(new_column)):
-            new_column[i] = (new_column[i]-intercept) / f.get_gage_length_in()
-        f.append_column(new_column, 'Nominal Strain [in/in]')
-        nom_strain = len(f.get_traces_raw())-1
-
-        new_column = f.get_zl_data()
-        for i in range(len(new_column)):
-            new_column[i] /= f.get_cs_area_in2()
-        f.append_column(new_column, 'Stress [psi]')
-        psi = len(f.get_traces_raw()) - 1
-
-        test_end = f.find_neg(test_end)
-
-        picturename = plot_stress_strain(f, psi, nom_strain, 0, test_end)
-        shutil.move(picturename, os.path.join(image_path, picturename))
+    DataFile_SL(filename).moby_foo(
+        image_path,
+        measurement_files,
+        gage_length_in,
+        N_POINTS_FOR_EST,
+        summary_file)
 
     print time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.localtime())
     print 'user:', os.times()[0], 's'
