diff -Naur reduce-2.2.0-jep01/HISTORY reduce-2.2.0-jep02/HISTORY
--- reduce-2.2.0-jep01/HISTORY	2011-07-21 13:36:08.306888344 -0400
+++ reduce-2.2.0-jep02/HISTORY	2011-07-21 14:24:54.614099680 -0400
@@ -1,3 +1,41 @@
+2011-07-21 reduce-2.2.0-jep02
+
+    rlo.py
+
+        Simplified printing same stuff to multiple outputs. 
+        Instead of having separate print statements for each output, 
+        one now has only a single print statements for multiple outputs. 
+
+        For example, the old way:
+
+            print time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
+            print "user:",os.times()[0],"s"
+            print "system:",os.times()[1],"s"
+            print >>log_file, time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
+            print >>log_file, "user:",os.times()[0],"s"
+            print >>log_file, "system:",os.times()[1],"s" 
+
+        was simplified to: 
+
+            t=Tee([sys.stdout,log_file])
+        ...
+            print >>t, time.strftime('%a, %d %b %Y %H:%M:%S +0000', 
+                time.localtime())
+            print >>t, 'user:', os.times()[0], 's'
+            print >>t, 'system:', os.times()[1], 's' 
+
+        New code tries to follow PEP 8 -- Style Guide for Python Code
+        http://www.python.org/dev/peps/pep-0008/
+
+    tee.py
+
+        Created.  Simplifies writing to multiple files. 
+
+        Instead of repeating a print for each file one needs to output to, 
+        one uses a single print that redirects to an instance of this class.  
+
+        Inspired by Unix tee program. 
+
 2011-07-21 reduce-2.2.0-jep01
 
     rlo.py
@@ -11,6 +49,7 @@
         of following code and subsequent unwrapping of some statements 
         which had previously been split across more than one line. 
 
+        Error messages were made more accurate and meaningful. 
         Old error message was about not being able to read, 
         even though the test was about writing to the directory. 
         The error message was changed to be about writing. 
diff -Naur reduce-2.2.0-jep01/rlo.py reduce-2.2.0-jep02/rlo.py
--- reduce-2.2.0-jep01/rlo.py	2011-07-21 13:29:51.351627313 -0400
+++ reduce-2.2.0-jep02/rlo.py	2011-07-21 14:30:17.198044254 -0400
@@ -31,6 +31,7 @@
 from dataFile import *
 from reducePlot import *
 from measurementFile import *
+from tee import *
 from xlrd import *
 
 '''
@@ -148,22 +149,18 @@
     summary_file=open(summary_file_path, 'w');
     summary_file.write('Specimen\tRate\tPeak Load')
     log_file=open(log_file_path, 'w');
+    t=Tee([sys.stdout, log_file])
 
     #Start looking at the data files
 
-    print time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
-    print "user:",os.times()[0],"s"
-    print "system:",os.times()[1],"s"
-    print >>log_file, time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
-    print >>log_file, "user:",os.times()[0],"s"
-    print >>log_file, "system:",os.times()[1],"s" 
+    print >>t, time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.localtime())
+    print >>t, 'user:', os.times()[0], 's'
+    print >>t, 'system:', os.times()[1], ' s' 
     
-    print "Measurement Files:"
-    print >>log_file, "Measurement Files:"
+    print >>t, 'Measurement Files:'
     
     for meas_file_name in measurement_file_names :
-        print meas_file_name
-        print >>log_file,meas_file_name
+        print >>t, meas_file_name
         measurement_files.append(measFile(meas_file_name))
         
         
@@ -172,10 +169,7 @@
         #get the name of the next file
     
         foo_name=os.path.basename(foo)
-        print "Analyzing:",
-        print foo_name
-        print >>log_file, "Analyzing:",
-        print >>log_file, foo_name
+        print >>t, 'Analyzing:', foo_name
         
         
     
@@ -209,48 +203,27 @@
         thisDataFile.traces[thisDataFile.LOAD].setLabel("Load [lbf]")
     
         #Count the number of rows        
-    
-        print "The number of lines is:",
-        print thisDataFile.number_of_lines
-        print >>log_file, "The number of lines is:",
-        print >>log_file, thisDataFile.number_of_lines
-        
+        print >>t, 'The number of lines is:', thisDataFile.number_of_lines
     
         #Get an initial estimate of the preload from the first 150 points.
     
         leadave=thisDataFile.find_preload(150)
-        print "The initial preload estimate is:",
-        print leadave
-        
-        print >>log_file, "The initial preload estimate is:",
-        print >>log_file, leadave
+        print >>t, 'The initial preload estimate is:', leadave
     
         #determine the failure point
     
         test_end=thisDataFile.find_end()
         if thisDataFile.Load_Drop_Line<thisDataFile.number_of_lines-1:
-            print "Load drop found at line:",
-            print thisDataFile.Load_Drop_Line
-
-            print >>log_file, "Load drop found at line:",
-            print >>log_file, thisDataFile.Load_Drop_Line
+            print >>t, 'Load drop found at line:', thisDataFile.Load_Drop_Line
         
-        print "The max area occurs at line:",
-        print thisDataFile.Area_End_Line
-        print "The 95% stroke value is at line:",
+        print 'The max area occurs at line:', thisDataFile.Area_End_Line
+        print 'The 95% stroke value is at line:',
         print thisDataFile.End_Of_Stroke_Line
         
-        print "The end of the test is line:",
-        print test_end
-
-        print >>log_file, "The end of the test is line:",
-        print >>log_file, test_end
+        print >>t, 'The end of the test is line:', test_end
         
-        print "The end of the test is time:",
-        print thisDataFile.getTimeData()[test_end]
-
-        print >>log_file, "The end of the test is time:",
-        print >>log_file, thisDataFile.getTimeData()[test_end]
+        print >>t, 'The end of the test is time:',
+        print >>t, thisDataFile.getTimeData()[test_end]
         
     
         #get the load shift from the post failure region
@@ -268,17 +241,11 @@
         if ( (test_end >= (0.99 * thisDataFile.number_of_lines)
              and leadave != 0)
              or postload > 0.5*max(thisDataFile.getLoadData())) : 
-            print "no post-failure zero-load data, using initial trace"
-            
-            print >>log_file, "no post-failure zero-load data, using initial trace"
+            print >>t, 'no post-failure zero-load data, using initial trace'
             loadshift = leadave
         else :
             loadshift = postload
-            print "Load offset from post failure data:",
-            print postload
-
-            print >>log_file, "Load offset from post failure data:",
-            print >>log_file, postload
+            print >>t, 'Load offset from post failure data:', postload
     
         #Zero the load trace
     
@@ -304,11 +271,7 @@
         # Find a new, better end point based on the shifted data
     
         test_end=thisDataFile.find_end()
-        print "The failure line is:",
-        print test_end
-
-        print >>log_file, "The failure line is:",
-        print >>log_file, test_end
+        print >>t, 'The failure line is:', test_end
 
     
         # If there is a post failure region, cut it off.
@@ -319,20 +282,12 @@
     
         disp_start = 0.0
         disp_start=thisDataFile.getStrokeTrace().get_point(0)
-        print "Start displacement is:",
-        print disp_start
-
-        print >>log_file, "Start displacement is:",
-        print >>log_file, disp_start
+        print >>t, 'Start displacement is:', disp_start
         thisDataFile.traces[1].shift_column(-disp_start)
         
         time_start = 0.0
         time_start = thisDataFile.getTimeTrace().get_point(0)
-        print "Start time is:",
-        print time_start
-
-        print >>log_file, "Start time is:",
-        print >>log_file, time_start
+        print >>t, 'Start time is:', time_start
         thisDataFile.traces[0].shift_column(-time_start)
         
     
@@ -345,15 +300,10 @@
         #Cut off the initial, pre-test trace and plot the result     
     
         pulse_start=thisDataFile.find_start(0.4,0.05)
-        print "The start line is:",
-        print pulse_start
-
-        print >>log_file, "The start line is:",
-        print >>log_file, pulse_start
+        print >>t, 'The start line is:', pulse_start
         
         if pulse_start>test_end :
-            print "start > end, adjusting..."
-            print >>log_file,"start > end, adjusting..."
+            print >>t, 'start > end, adjusting...'
 
 ##work in progress
 
@@ -419,16 +369,12 @@
     
         #thisDataFile.log_info(summary_file,test_end)
         
-        print time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
-        print "user:",os.times()[0],"s"
-        print "system:",os.times()[1],"s"
-
-        print >>log_file, time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.localtime())
-        print >>log_file, "user:",os.times()[0],"s"
-        print >>log_file, "system:",os.times()[1],"s"
+        print >>t, time.strftime('%a, %d %b %Y %H:%M:%S +0000', 
+           time.localtime())
+        print >>t, 'user:', os.times()[0], 's'
+        print >>t, 'system:', os.times()[1], 's'
 
-        print ""
-        print >>log_file,""
+        print >>t, ''
         
     
         #(end of analysis loop)
diff -Naur reduce-2.2.0-jep01/tee.py reduce-2.2.0-jep02/tee.py
--- reduce-2.2.0-jep01/tee.py	1969-12-31 19:00:00.000000000 -0500
+++ reduce-2.2.0-jep02/tee.py	2011-07-21 14:08:23.918554410 -0400
@@ -0,0 +1,48 @@
+#! /usr/bin/python
+# Copyright 2011 James E. Prior
+#
+# This is the tee module. 
+#
+#    Tee is free software: you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation, either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Tee is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Tee  If not, see <http://www.gnu.org/licenses/>.
+#
+
+class Tee:
+    '''
+    Simplifies writing to multiple files. 
+
+    Instead of repeating a print for each file one needs to output to, 
+    one uses a single print that redirects to an instance of this class.  
+
+    For example, instead of doing: 
+       print 'big long ugly messy stuff'
+       print >>file1 'big long ugly messy stuff'
+       print >>file2 'big long ugly messy stuff'
+    one does the following:
+       tee=Tee([sys.stdout,file1,file2])
+       ...
+       print >>tee 'big long ugly messy stuff'
+    '''
+    def __init__(self,list_of_open_files):
+        '''
+        Accepts one argument, a list of files that are already open. 
+        '''
+        self.files=list_of_open_files
+    def write(self,s):
+        '''
+        Accepts one argument, and writes it to each of the files 
+        that were specified when the instance was created.  
+        '''
+        for f in self.files:
+            f.write(s)
+
